Pour compiler ce projet vous avez besoin de :
- ocaml
- menhir
- dune
Chacun peut être installé à l'aide d'opam, ou d'apt-get sous Debian/Ubuntu ou Windows Subsystem for Linux. Dune est installé sur les machines du PUIO (contrairement à ocamlbuild que je pensais vous faire utiliser au début).

Pour compiler :
dune build

L'exécutable est créé dans le répertoire _build. Plus précisément, il s'agit de :
_build/default/minic.exe

Pour tester sur le fichier source [test.mnc]
./_build/default/minic.exe test.mnc

(Vous pouvez aussi créer un lien symbolique depuis votre répertoire racine pour accéder directement au programme exécutable)


Conseil pour progresser dans le projet :
(a) choisir un petit aspect du langage source pas encore traité (par exemple : une certaine forme d'expression ou d'instruction)
(b) créer un ou plusieurs nouveaux fichiers de tests intégrant ce nouvel aspect (et rien d'autre qui n'aurait pas encore été traité)
(c) ajouter dans minic_parser.mly les déclarations de nouveaux lexèmes nécessaires
(d) compléter minic_lexer.mll pour reconnaître ces nouveaux lexèmes
(e) compléter minic_parser.mly pour reconnaître la nouvelle forme d'expression ou d'instruction
(f) compléter minic_typechecker.ml pour traiter le nouveau cas
(g) compiler le programme et vérifier qu'il traite correctement les tests
Puis recommencer jusqu'à avoir traité l'ensemble du langage Mini-C.


Conservez bien tous les tests que vous avez élaborés. Il faut les vérifier de temps à autre, et on vous demandera de les fournir avec votre rendu.